#Connect to storage account
#input: tenantid, credential
#output: context 

function ConnectGen1{
    [cmdletBinding()]
    param([string] $tenantid, [System.Management.Automation.PSCredential] $credential)

    try {
        Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant $tenantid;
    }
    catch{
        throw $error[0].Exception;
    }
}

#get gen1 filelist
#input: filepath, account name, cutoff time
#output: filelist
function WriteGen1ToSql {
    [cmdletBinding()]
    param([string] $FilePath, [string] $AccountName, [System.Data.SqlClient.SqlConnection] $sqlConn, [string] $cutofftime, [int]$batchid) 
    if ($cutofftime -eq '')
    {
    $cutoffint=0;
    }
    else{
    $cutoffint=[int64]((get-date $cutofftime)-(get-date "1/1/1970")).TotalMilliseconds;
    }

    #$sqlConn=ConnectToSql $connectionstring.SecretValueText;

    if ($batchid -eq '')
    {
        $batchid=1
    }

    if ($FilePath -ne '' -and $AccountName -ne ''){
        $gen1FileList=New-Object System.Data.DataTable;
        $gen1FolderList=CreateGen1FolderTable;
        $gen1AclList=CreateGen1AclTable;
        $time=get-date;

        $ChildItems= Get-AzDataLakeStoreItem -AccountName $AccountName -Path $FilePath;
        if ($ChildItems.Type -eq "DIRECTORY"){          
            $gen1FolderList.rows.add($batchid, $ChildItems.name, $ChildItems.path, '','',$ChildItems.length, $time);
            $ChildItems = Get-AzDataLakeStoreChildItem -AccountName $AccountName -Path $FilePath;
        }

        foreach ($ChildItem in $ChildItems) {
            switch ($ChildItem.Type) {
                "FILE" {
                    if ($ChildItem.modificationtime -gt $cutoffint){
                        if ($sqlConn.State -ne 'Open')
                        {
                        $sqlConn.Open();
                        }

                        $acl=Get-AzDataLakeStoreItemAclEntry -AccountName $AccountName -Path $ChildItem.path;
                        #$fileid=GetFileId $sqlConn;
                        #$folderid=GetFileId $sqlConn;
                        $fileid=1;
                        $folderid=1;
                        #$file=$ChildItem|select-object name, path, blocksize, length, modificationtime.datetime, owner, lastwritetime.datetime ,@{name="RowInsertedDate";e={$time}};
                        #$gen1FileList.add($file);
                           Start-Job -ScriptBlock { 
                        foreach($aclitem in $acl)
                        {    
                        $gen1AclList.rows.add($fileid,$ChildItem.name,  $aclitem.scope, $aclitem.type, $aclitem.id, $aclitem.permission, $time );
                        }
                           }
                        }
                }
                "DIRECTORY" {
                    WriteGen1ToSql $ChildItem.path $AccountName $connectionstring $cutofftime $batchid;
                }
            }
        }       
    }
    else{
        throw 'cannot find filepath or account';
    }  
    
    return $gen1AclList;
    
    #Start-Job -ScriptBlock { 
    #WriteGen1AclToSql $sqlConn $ChildItem $fileid;
    #}  
}


function ConnectToSql
{
    param([string] $connectionstring)
    $sqlConn = New-Object System.Data.SqlClient.SqlConnection;
    $sqlConn.ConnectionString = $connectionstring;
    return $sqlConn;
}


function GetFileId{
    param([System.Data.SqlClient.SqlConnection] $sqlConn)
    $query = "Select max(fileid) from [Inventory].[Gen1File]";
    $cmd=New-Object System.Data.SqlClient.SqlCommand($query,$sqlConn);
    [int]$fileid=$cmd.ExecuteScalar();
    return $fileid;
}

function GetFolderId{
    param([System.Data.SqlClient.SqlConnection] $sqlConn)
    $query = "Select max(folderid) from [Inventory].[Gen1Folder]";
    $cmd=New-Object System.Data.SqlClient.SqlCommand($query,$sqlConn);
    [int]$folderid=$cmd.ExecuteScalar();
    return $folderid;
}

function CreateGen1AclTable{
$aclTable=New-Object System.Data.DataTable;
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'FileId', ([int])));
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'FileName', ([string])));
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'AccessScope', ([string])));
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'AccessType', ([string])));
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'AccessObjectId', ([string])));
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'FilePermission', ([string])));
$aclTable.Columns.Add((New-Object System.Data.DataColumn 'RowInsertedDate', ([datetime])));
return ,$aclTable;
}

function CreateGen1FolderTable{
$folderTable=New-Object System.Data.DataTable;
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'BatchId', ([int])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'FolderName', ([string])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'FolderPath', ([string])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'AssignedFolderType', ([string])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'IdentifiedFolderType', ([string])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'FolderSizeInBytes', ([float])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'RowInsertedDate', ([datetime])));
$folderTable.Columns.Add((New-Object System.Data.DataColumn 'RowUpdatedDate', ([datetime])));
return ,$folderTable;
}

function CreateGen1FileTable{
$fileTable=New-Object System.Data.DataTable;
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'FolderId', ([int])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'FileName', ([string])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'FilePath', ([string])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'BlockSize', ([int])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'FileSizeInBytes', ([float])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'AssignedFolderType', ([string])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'IdentifiedFolderType', ([string])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'FolderSizeInBytes', ([float])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'RowInsertedDate', ([datetime])));
$fileTable.Columns.Add((New-Object System.Data.DataColumn 'RowUpdatedDate', ([datetime])));
return ,$filerTable;
}

[FolderId] int ,
[FileName] nvarchar(max), 
[FilePath] nvarchar(max), 
[BlockSize] int, 
[FileSizeInBytes] decimal(13,2),
[FileModificationTime] datetime, 
[FileOwner] uniqueidentifier, 
[FileLastWriteTime] datetime, 
[RowInsertedDate] datetime,
[RowUpdatedDate] datetime

$files.name, $files.path, $files.blocksize, $files.length, $files.modificationtime.datetime, $files.owner, $files.lastwritetime.datetime ,$time; 


function SqlBulkInsert{
    param([System.Data.SqlClient.SqlConnection] $sqlConn, [System.Data.DataTable] $dtable, [string] $tablename)
    $bulkCopy = new-object ("System.Data.SqlClient.SqlBulkCopy") $sqlConn
    $bulkCopy.BatchSize = 10000;
    $bulkCopy.BulkCopyTimeout = 1000;
    $bulkCopy.DestinationTableName = $tablename;
    $bulkCopy.WriteToServer($dtable);
}

#get gen1 filelist
#input: filelist
#output: output location
function ExportCSVFile{
    param([System.Collections.ICollection] $Files, [string] $outputlocation)  
    $Files | Export-Csv -Path $outputlocation
}



#get gen1 filelist
#input: account name, filepath, outputlocation
#output: none
function UploadFileToGen1{
    param([string] $Account, [string] $FilePath, [string] $outputlocation)  
    Import-AzDataLakeStoreItem -AccountName $Account `
        -Path $FilePath `
        -Destination $outputlocation
}
