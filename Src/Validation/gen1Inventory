#Connect to storage account
#input: tenantid, credential
#output: context 

function ConnectGen1{
    [cmdletBinding()]
    param([string] $tenantid, [System.Management.Automation.PSCredential] $credential)

    try {
        Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant $tenantid;
    }
    catch{
        throw $error[0].Exception;
    }
}

#get gen1 filelist
#input: filepath, account name, cutoff time
#output: filelist
function WriteGen1ToSql {
    [cmdletBinding()]
    param([string] $FilePath, [string] $AccountName, [System.Data.SqlClient.SqlConnection] $sqlConn, [string] $cutofftime, [int]$batchid) 
    if ($cutofftime -eq '')
    {
    $cutoffint=0;
    }
    else{
    $cutoffint=[int64]((get-date $cutofftime)-(get-date "1/1/1970")).TotalMilliseconds;
    }

    #$sqlConn=ConnectToSql $connectionstring.SecretValueText;
    if ($sqlConn.State -ne 'Open' -and $sqlConn -ne $null)
    {
    $sqlConn.Open();
    }

    if ($batchid -eq '')
    {
        $batchid=1
    }

    if ($FilePath -ne '' -and $AccountName -ne ''){
               
        $query="EXEC GetColumn 'GEN1Folder', 'INVENTORY'";
        $sqltable=ReadSqlTable $sqlConn $query;
        $gen1FolderList=CreateDataTable $sqltable;

        $query="EXEC GetColumn 'GEN1FILE', 'INVENTORY'";
        $sqltable=ReadSqlTable $sqlConn $query;
        $gen1FileList=CreateDataTable $sqltable;

        $query="EXEC GetColumn 'Gen1ACL', 'INVENTORY'";
        $sqltable=ReadSqlTable $sqlConn $query;
        $gen1AclList=CreateDataTable $sqltable;

        $folderid=GetSqlId $sqlConn 'folderid' 'inventory.gen1folder';
        if ($folderid -eq 0){
        $folderid=1;}

        $fileid=GetSqlId $sqlConn 'fileid' 'inventory.gen1file'; 
        if ($fileid -eq 0){
        $fileid=1;}

        $time=get-date;

        $ChildItems= Get-AzDataLakeStoreItem -AccountName $AccountName -Path $FilePath;
        if ($ChildItems.Type -eq "DIRECTORY"){      
            $gen1FolderList.rows.add($batchid, $ChildItems.name, $ChildItems.path, '','',$ChildItems.length, $time);
            $folderid+=1;
            $ChildItems = Get-AzDataLakeStoreChildItem -AccountName $AccountName -Path $FilePath;
        }

        foreach ($ChildItem in $ChildItems) {
            switch ($ChildItem.Type) {
                "FILE" {
                    if ($ChildItem.modificationtime -gt $cutoffint){
                        if ($sqlConn.State -ne 'Open')
                        {
                        $sqlConn.Open();
                        }
                        $gen1FileList.rows.add($folderid, $ChildItem.name, $ChildItem.path, $ChildItem.blocksize, $ChildItem.length, $ChildItem.modificationtime.datetime,$ChildItem.owner,$ChildItem.lastwritetime.datetime, $time);

                        $fileid+=1;                       
                        $acl=Get-AzDataLakeStoreItemAclEntry -AccountName $AccountName -Path $ChildItem.path;

                        foreach($aclitem in $acl)
                        {    
                        $gen1AclList.rows.add($fileid, $ChildItem.name,$aclitem.scope, $aclitem.type, $aclitem.id, $aclitem.permission, $time);
                        }

                        }
                }
                "DIRECTORY" {
                    WriteGen1ToSql $ChildItem.path $AccountName $sqlConn $cutofftime $batchid;
                }
            }
        }       
    }
    else{
        throw 'cannot find filepath or account';
    }  
    
    #Start-Job -ScriptBlock { 
    SqlBulkInsert $sqlConn $gen1FolderList 'inventory.gen1folder'
    #};  

    #Start-Job -ScriptBlock { 
    SqlBulkInsert $sqlConn $gen1FileList 'inventory.gen1File'
    #}; 

    #Start-Job -ScriptBlock { 
    SqlBulkInsert $sqlConn $gen1AclList 'inventory.gen1acl'
    #};  
}


function ConnectToSql
{
    param([string] $connectionstring)
    $sqlConn = New-Object System.Data.SqlClient.SqlConnection;
    $sqlConn.ConnectionString = $connectionstring;
    return $sqlConn;
}


function GetSqlId{
    param([System.Data.SqlClient.SqlConnection] $sqlConn, [string] $idName, [string]$tablename)
    $query = "Select max($($idName)) from $($tablename)";
    $cmd=New-Object System.Data.SqlClient.SqlCommand($query,$sqlConn);
    if($cmd.ExecuteScalar() -is [DBNull]){
    $fileid=0;}
    else{
    $fileid=$cmd.ExecuteScalar();}
    return $fileid;
}

function ReadSqlTable{
    param([System.Data.SqlClient.SqlConnection] $sqlConn, [string] $query)
    $SqlCmd = New-Object System.Data.SqlClient.SqlCommand
    $SqlCmd.CommandText = $query
    $SqlCmd.Connection = $sqlConn
    $SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
    $SqlAdapter.SelectCommand = $SqlCmd
    $DataSet = New-Object System.Data.DataSet
    $SqlAdapter.Fill($DataSet)
    return $DataSet.Tables[0]
}

function CreateDataTable{
    param([system.array] $sqltable)
    $dataTable=New-Object System.Data.DataTable;
    foreach($item in $sqltable)
    {
        if ($item[1] -ne $null){
        $dataTable.Columns.Add((New-Object System.Data.DataColumn $item[0], ($item[1] -as [type])));
        }
    }
    return ,$dataTable;
}


function SqlBulkInsert{
    param([System.Object] $sqlConn, [System.Data.DataTable] $dtable, [string] $tablename)
    $bulkCopy = new-object ("System.Data.SqlClient.SqlBulkCopy") $sqlConn
    foreach ($column in $dtable.Columns) 
    {$bulkCopy.ColumnMappings.Add($column.ColumnName, $column.ColumnName) > $null }
    $bulkCopy.BatchSize = 10000;
    $bulkCopy.BulkCopyTimeout = 1000;
    $bulkCopy.DestinationTableName = $tablename;
    $bulkCopy.WriteToServer($dtable);
}
